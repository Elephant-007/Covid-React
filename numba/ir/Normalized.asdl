-- Normalized Python AST:
--
--    * global, nonlocal: Single declaration name
--    * import, import from: Single import name
--    * assignments: Single LHS
--    * comparisons: Single operator, single RHS
--    * boolean operations: single RHS
--    * del: Single variable name
--
-- Translate from Python 2 AST to Python 3 forms:
--    * repr (backticks): Call(Name('repr'), value)
--    * Print(...): Call(Name('print'), ...)
--    * Exec(...): Call(Name('exec'), ...)
--    * Subscript(..., slices, ...): Subscript(..., ExtSlice(slices), ...)
--    * Ellipsis (the slice): Ellipsis (the expression)
--    * With(...): ...
--    * Raise(...): ...

module Normalized version "0.1"
{

    stmt = FunctionDef(identifier name, arguments args,
                       stmt* body, expr* decorator_list, expr? returns)
          | ClassDef(identifier name,
                     expr* bases,
                     keyword* keywords,
                     expr? starargs,
                     expr? kwargs,
                     stmt* body,
                     expr* decorator_list)
          | Return(expr? value)

          | Delete(expr target)
          | Assign(expr target, expr value)
          | AugAssign(expr target, operator op, expr value)

          -- use 'orelse' because else is a keyword in target languages
          | For(expr target, expr iter, stmt* body, stmt* orelse)
          | While(expr test, stmt* body, stmt* orelse)
          | If(expr test, stmt* body, stmt* orelse)
          | With(withitem* items, stmt* body)

          | Raise(expr? exc, expr? cause)
          | Try(stmt* body, excepthandler* handlers, stmt* orelse,
                stmt* finalbody)
          | Assert(expr test, expr? msg)

          | Import(alias name)
          | ImportFrom(identifier? module, alias name, int? level)

          | Global(identifier name)
          | Nonlocal(identifier name)
          | Expr(expr value)
          | Pass | Break | Continue

          -- col_offset is the byte offset in the utf8 string the parser uses
          attributes (int lineno, int col_offset)

    expr = BoolOp(expr left, boolop op, expr right)
         | BinOp(expr left, operator op, expr right)
         | UnaryOp(unaryop op, expr operand)
         | Lambda(arguments args, expr body)
         | Let(identifier target, expr defn, expr body)
         | IfExp(expr test, expr body, expr orelse)
         | Dict(expr* keys, expr* values)
         | Set(expr* elts)
         | List(expr* elts)
         | Tuple(expr* elts)
         | ListComp(expr elt, comprehension* generators)
         | SetComp(expr elt, comprehension* generators)
         | DictComp(expr key, expr value, comprehension* generators)
         | GeneratorExp(expr elt, comprehension* generators)

         -- the grammar constrains where yield expressions can occur
         | Yield(expr? value)
         | YieldFrom(expr? value)
         | Compare(expr left, cmpop op, expr right)
         | Call(expr func, expr* args, keyword* keywords,
                expr? starargs, expr? kwargs)
         | Num(object n) -- a number as a PyObject.
         | Str(string s) -- need to specify raw, unicode, etc?
         | Bytes(object s)
         | Ellipsis
         -- other literals? bools?

         -- the following expression can appear in assignment context
         | Attribute(expr value, identifier attr, expr_context ctx)
         | Subscript(expr value, slice slice, expr_context ctx)
         | Starred(expr value, expr_context ctx)
         | Name(identifier id, expr_context ctx)

          -- col_offset is the byte offset in the utf8 string the parser uses
          attributes (int lineno, int col_offset)

    expr_context = Load | Store | Del | AugLoad | AugStore | Param

    slice = Slice(expr? lower, expr? upper, expr? step)
          | ExtSlice(slice* dims)
          | Index(expr value)

    boolop = And | Or

    operator = Add | Sub | Mult | Div | Mod | Pow | LShift
             | RShift | BitOr | BitXor | BitAnd | FloorDiv

    unaryop = Invert | Not | UAdd | USub

    cmpop = Eq | NotEq | Lt | LtE | Gt | GtE | Is | IsNot | In | NotIn

    comprehension = (expr target, expr iter, expr* ifs)

    excepthandler = ExceptHandler(expr? type, identifier? name, stmt* body)
                    attributes (int lineno, int col_offset)

    arguments = (arg* args, identifier? vararg, expr? varargannotation,
                 arg* kwonlyargs, identifier? kwarg,
                 expr? kwargannotation, expr* defaults,
                 expr* kw_defaults)
    arg = (identifier arg, expr? annotation)

    -- keyword arguments supplied to call
    keyword = (identifier arg, expr value)

    -- import name with optional 'as' alias.
    alias = (identifier name, identifier? asname)

    withitem = (expr context_expr, expr? optional_vars)
}
