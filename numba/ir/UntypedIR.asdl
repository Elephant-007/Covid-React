-- Untyped IR with expression trees:
--
--    * Contains Basic Blocks and conditional and unconditional branches
--
-- The main difference with Normalized IR is that we have explicit basic
-- blocks and (annotated) control flow.
--
-- Each basic blocks ends with a branch to a new basic block, or a return.
-- High-level constructs such as exception handling blocks or loops are
-- annotated through Setup annotations (SetupLoop, SetupExcept,
-- SetupFinally, SetupWith)
--
--
-- Some differences:
--
--     Break        -> Branch
--     Continue     -> Branch
--     Raise        -> [ Raise ; Branch ]
--     If           -> CBranch
--     While        -> CBranch + SetupLoop
--     For          -> CBranch + SetupLoop + Iter + Next
--     TryFinally   -> Branch + SetupFinally
--     TryExcept    -> Branch + SetupExcept
--     With         -> Branch + SetupExcept + SetupFinally
--     Name('True') -> Bool

module UnTyped version "0.1"
{

    unit = CodeObject(identifier name, arguments args, block* blocks)
         | DataObject(identifier label, expr init)

    block = Block(identifier id, defn* defns, tail tail_expr)

    tail = Jump(identifier target)
         | If(expr test, identifier true_target, identifier false_target)
         | Raise(expr exn)
         | Return(expr result)
         | Try(identifier nominal, identifier handler)

    defn = (identifier? def_id, expr value)

    expr = BoolOp(expr left, boolop op, expr right)
         | BinOp(expr left, operator op, expr right)
         | UnaryOp(unaryop op, expr operand)
         | Lambda(arguments args, expr body)
         | IfExp(expr test, expr body, expr orelse)
         | Dict(expr* keys, expr* values)
         | Set(expr* elts)
         | List(expr* elts)
         | Tuple(expr* elts)

         -- the grammar constrains where yield expressions can occur
         | Yield(expr? value)
         | YieldFrom(expr? value)
         | Compare(expr left, cmpop op, expr right)
         | Call(expr func, expr* args, keyword* keywords,
                expr? starargs, expr? kwargs)
         | Num(object n) -- a number as a PyObject.
         | Str(string s) -- need to specify raw, unicode, etc?
         | Bytes(bytes s)
         | Ellipsis
         -- other literals? bools?

         -- the following expression can appear in assignment context
         | Attribute(expr value, identifier attr, expr_context ctx)
         | Subscript(expr value, slice slice, expr_context ctx)
         | Starred(expr value, expr_context ctx)
         | Name(identifier id, expr_context ctx)

         | Import(alias name)
         | ImportFrom(identifier? module, alias name, int? level)
         | Phi(phi_source* incomming)

          -- col_offset is the byte offset in the utf8 string the parser uses
          attributes (int lineno, int col_offset)

    expr_context = Load | Store | Del | AugLoad | AugStore | Param

    phi_source = (identifier in_block, expr in_val)

    slice = Slice(expr? lower, expr? upper, expr? step)
          | ExtSlice(slice* dims)
          | Index(expr value)

    boolop = And | Or

    operator = Add | Sub | Mult | Div | Mod | Pow | LShift
             | RShift | BitOr | BitXor | BitAnd | FloorDiv

    unaryop = Invert | Not | UAdd | USub

    cmpop = Eq | NotEq | Lt | LtE | Gt | GtE | Is | IsNot | In | NotIn

    comprehension = (expr target, expr iter, expr* ifs)

    excepthandler = ExceptHandler(expr? type, identifier? name, stmt* body)
                    attributes (int lineno, int col_offset)

    arguments = (arg* args, identifier? vararg, expr? varargannotation,
                 arg* kwonlyargs, identifier? kwarg,
                 expr? kwargannotation, expr* defaults,
                 expr* kw_defaults)
    arg = (identifier arg, expr? annotation)

    -- keyword arguments supplied to call
    keyword = (identifier arg, expr value)

    -- import name with optional 'as' alias.
    alias = (identifier name, identifier? asname)

    withitem = (expr context_expr, expr? optional_vars)
}
