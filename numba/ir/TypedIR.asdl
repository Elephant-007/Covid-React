-- Typed IR with expression trees:
--
--    * Contains Basic Blocks and conditional and unconditional branches
--
-- The main difference with Normalized IR is that we have explicit basic
-- blocks.

module UnTyped version "0.1"
{

    -- Function. blocks[0] is the entry block
	func = FunctionDef(identifier name, arguments args,
                       block *entry, object *blocks, expr* decorator_list)

    block = Block(op *body)

    stmt  = Print(expr? dest, expr* values, bool nl)
          | func

          ---------- Basic Block Terminators ----------

          -- Basic Control Flow
          | Loop(block bbcond, block bbbody, block bbexit)
          | If(block bbcond, block bbbody, block bbelse, block exit)
          | Return(expr? value)
          | Jump(block bbdst) -- Unconditional jump
          -- | Break | Continue -- These are Jumps now!

          -- Exceptions
	      | With(expr context_expr, expr? optional_vars, block bbbody)
	      | Raise(expr? type, expr? inst, expr? tback)
	      | TryExcept(block bbbody, block* bbexcepts, bbbody orelse)
	      | TryFinally(stmt* body, stmt* finalbody)

          ---------- Assignments and Scoping ----------

          | Delete(expr target)
          | Assign(expr target, expr value)

	      | Import(alias name)
	      | ImportFrom(identifier? module, alias name, int? level)
	      | Global(identifier name)
          | Nonlocal(identifier name)

          ---------- Miscellaneous ----------

          | Assert(expr test, expr? msg)
	      | Exec(expr body, expr? globals, expr? locals)
	      | Expr(expr value)

	      -- col_offset is the byte offset in the utf8 string the parser uses
	      attributes (int lineno, int col_offset)

	expr = BoolOp(expr left, boolop op, expr right)
	     | BinOp(expr left, operator op, expr right)
	     | UnaryOp(unaryop op, expr operand)

	     | Dict(expr* keys, expr* values)
         | Set(expr* elts)
         | List(expr* elts)
         | Tuple(expr* elts)

	     | Yield(expr? value)
	     | Compare(expr left, cmpop op, expr right)
	     | Call(expr func, expr* args, keyword* keywords,
			    expr? starargs, expr? kwargs)
	     | Repr(expr value)
	     | Num(object n) -- a number as a PyObject.
	     | Str(string s) -- need to specify raw, unicode, etc?
	     -- other literals? bools?

	     -- the following expression can appear in assignment context
	     | Attribute(expr value, identifier attr, expr_context ctx)
	     | Subscript(expr value, slice *slice, expr_context ctx)
	     | Name(identifier id, expr_context ctx)
	     | Starred(expr value, expr_context ctx)

	      -- col_offset is the byte offset in the utf8 string the parser uses
	      attributes (int lineno, int col_offset)

	expr_context = Load | Store | Del | AugLoad | AugStore | Param

	slice = Ellipsis
	      | Slice(expr? lower, expr? upper, expr? step)
	      | Index(expr value)

	boolop = And | Or

	operator = Add | Sub | Mult | Div | Mod | Pow | LShift
                   | RShift | BitOr | BitXor | BitAnd | FloorDiv

	unaryop = Invert | Not | UAdd | USub

	cmpop = Eq | NotEq | Lt | LtE | Gt | GtE | Is | IsNot | In | NotIn

	comprehension = (expr target, expr iter, expr* ifs)

	-- not sure what to call the first argument for raise and except
	excepthandler = ExceptHandler(expr? type, expr? name, stmt* body)
	                attributes (int lineno, int col_offset)

	arguments = (expr* args, identifier? vararg,
		         identifier? kwarg, expr* defaults)

    -- keyword arguments supplied to call
    keyword = (identifier arg, expr value)

    -- import name with optional 'as' alias.
    alias = (identifier name, identifier? asname)
}