-- Typed IR with expression trees.

module Typed version "0.1"
{

    -- Import everything except 'expr'
	from UntypedIR import unit, block, tail, defn, phi_source
	from UntypedIR import boolop, operator, unaryop, cmpop, slice
	from UntypedIR import arguments
	from UntypedIR import expr_context, keyword, alias

    expr = BoolOp(expr left, boolop op, expr right)
         | BinOp(expr left, operator op, expr right)
         | UnaryOp(unaryop op, expr operand)
         | IfExp(expr test, expr body, expr orelse)
         | Dict(expr* keys, expr* values)
         | Set(expr* elts)
         | List(expr* elts)
         | Tuple(expr* elts)

         | Yield(expr? value)
         | YieldFrom(expr? value)
         | Compare(expr left, cmpop op, expr right)
         | Call(expr func, expr* args, keyword* keywords,
                expr? starargs, expr? kwargs)

         -- the following expression can appear in assignment context
         | Attribute(expr value, identifier attr, expr_context ctx)
         | Subscript(expr value, slice slice, expr_context ctx)
         | Starred(expr value, expr_context ctx)
         | Name(identifier id, expr_context ctx)

         | Import(alias name)
         | ImportFrom(identifier? module, alias name, int? level)
         | Phi(phi_source* incomming)
         | Constant(object value)

          -- col_offset is the byte offset in the utf8 string the parser uses
          attributes (int lineno, int col_offset, type type, object meta)

}
