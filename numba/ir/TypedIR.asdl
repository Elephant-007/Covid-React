-- Typed IR with expression trees.
--
-- Some differences with untyped ir:
--
--      Str | Dict | List | Bool | etc -> Constant

module UnTyped version "0.1"
{

    -- Import everything except 'expr'
	from UntypedIR import block, stmt, incoming
	from UntypedIR import boolop, operator, unaryop, cmpop, slice
	from UntypedIR import comprehension, excepthandler, arguments
	from UntypedIR import expr_context, keyword, alias

	expr = BoolOp(expr left, boolop op, expr right)
	     | BinOp(expr left, operator op, expr right)
	     | UnaryOp(unaryop op, expr operand)

	     -- Constants
	     | Constant(object value)

         -- Make imports expressions, the result of which are regular values!
         | Import(alias name)
         | ImportFrom(identifier? module, alias name, int? level)

	     | Yield(expr? value)
	     | Compare(expr left, cmpop op, expr right)
	     | Call(expr func, expr* args, keyword* keywords,
			    expr? starargs, expr? kwargs)

	     -- the following expression can appear in assignment context
	     | Attribute(expr value, identifier attr, expr_context ctx)
	     | Subscript(expr value, slice *slice, expr_context ctx)
	     | Name(identifier id, expr_context ctx)
	     | Starred(expr value, expr_context ctx)

	     -- For loop Iteration
	     | Iter(expr iterable)
	     | Next(expr iterator)

	      -- col_offset is the byte offset in the utf8 string the parser uses
	      attributes (int lineno, int col_offset, type type, object meta)

}